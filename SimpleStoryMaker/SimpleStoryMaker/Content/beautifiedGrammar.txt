grammar Story;

program: player globalCode* story EOF;

player: PLAYER LBRACE attribute* RBRACE;

attribute: IDENTIFIER COLON expression SEMICOLON;

expression
    : literal                           #literalExpression
    | function                          #functionExpression
    | PLAYERCALL IDENTIFIER             #playerCallExpression
    | IDENTIFIER                        #variableCallExpression
    | LBRACKET expression RBRACKET      #paranthesizedExpression
    | MINUS expression                  #negativeExpression
    | NOT expression                    #notExpression
    | expression MULTOP expression      #multiplicativeExpression
    | expression ADDOP expression       #additiveExpression
    | expression COMPAREOP expression   #comparisonExpression
    | expression BOOLOP expression      #booleanExpression
    ;

globalCode: code | globalDeclaration;
localCode: code | localDeclaration;
code: assignment | ifBlock | whileBlock | playerAttributeAssignment ;

globalDeclaration: VAR assignment;
localDeclaration: LOCAL assignment;

assignment: IDENTIFIER ASSIGNMENT expression SEMICOLON;
playerAttributeAssignment: PLAYERCALL IDENTIFIER ASSIGNMENT expression SEMICOLON;

if: IF expression LBRACE localScope RBRACE;
elif: ELIF expression LBRACE localScope RBRACE;
else: ELSE LBRACE localScope RBRACE;

whileBlock: WHILE expression LBRACE localScope RBRACE;

function: rand_func;

rand_func: RAND LBRACKET expression COLON expression RBRACKET;

story: start scene* end;

start: SCENE START LBRACE sceneScope RBRACE;
end: SCENE END LBRACE endSceneScope RBRACE;
scene: SCENE IDENTIFIER LBRACE sceneScope RBRACE;

sceneScope : localScope write (choices | goTo);
endSceneScope: localScope write;
localScope: localCode*;

write: WRITE COLON expression SEMICOLON;

choices:CHOICES LBRACE choice+ RBRACE;

choice: choiceCondition? IDENTIFIER LBRACE choiceText goTo RBRACE;

choiceScope: localCode* choiceText (goTo | write);
choiceCondition: IF expression;
choiceText: TEXT COLON expression SEMICOLON;

goTo: GOTO COLON (IDENTIFIER | START | END) SEMICOLON;

literal: number | STRING | BOOL;

number: INT | INT POINT INT;

MULTOP: MULTIPLY | DIVIDE;
ADDOP: PLUS | MINUS;
COMPAREOP: EQUALS | NOTEQUALS | GREATER | LESS | GREATEREQUAL | LESSEQUAL;
BOOLOP: AND | OR;

INT: [0-9]+;
STRING: ('"' ~'"'* '"') | ('\'' ~'\''* '\'');
BOOL: TRUE | FALSE;

WS: [ \t\r\n]+ -> skip;
START: 'START';
END: 'END';
SCENE: 'SCENE ';
PLAYER: 'PLAYER';
LBRACE: '{';
RBRACE: '}';
COLON: ':';
SEMICOLON: ';';
PLAYERCALL: 'PLAYER.';
LBRACKET: '(';
RBRACKET: ')';
MINUS: '-';
NOT: '!';
VAR: 'var ';
LOCAL: 'local ';
ASSIGNMENT: '=';
WRITE: 'write';
CHOICES: 'choices';
TEXT:'text';
GOTO: 'goto';
POINT: '.';
MULTIPLY: '*';
DIVIDE: '/';
PLUS: '+';
EQUALS: '==';
NOTEQUALS: '!=';
GREATER: '>';
LESS: '<';
GREATEREQUAL: '>=';
LESSEQUAL: '<=';
AND: 'and';
OR: 'OR';
TRUE: 'true';
FALSE: 'false';
IF: 'if ';
ELIF: 'elif ';
ELSE: 'else ';
IDENTIFIER: [a-zA-Z_][a-zA-Z0-9_]*;